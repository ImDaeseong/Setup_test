#include "ifx.h"

#define PATH_DRIVE     0
#define PATH_PATH      1
#define PATH_FILENAME  2
#define PATH_EXT       3


prototype NUMBER Shell32.FindExecutableA(STRING, STRING, BYREF STRING);
prototype NUMBER Shell32.ShellExecuteA(HWND, STRING, STRING, STRING, STRING, INT);


prototype NUMBER InstallDotNet();
prototype BOOL CheckDotNetInstall();

prototype NUMBER InstallEdge();
prototype CheckEdgeInstall();

prototype NUMBER InstallRedist();

prototype installMariaDBservice();
prototype StartMariaDBService();
prototype StopMariaDBService();
prototype DeleteMariaDBService();
prototype AddFirewallRule();
prototype copydb();
prototype waitForMariaDBFiles();
prototype writeMariaDBIni(STRING);


// ───── [설치 시작] ─────
function OnFirstUIBefore()
    NUMBER  nResult, nLevel, nSize, nSetupType;
    STRING  szTitle, szMsg, szOpt1, szOpt2, szLicenseFile;
    STRING  szName, szCompany, szTargetPath, szDir, szFeatures;
    BOOL    bLicenseAccepted;
    STRING  szDrive, szPath, szFileName, szExt, szTrimmedPath, szLastChar;
    NUMBER  nindex;
begin
    if (REMOVEONLY) then
        Disable(DIALOGCACHE);
        szMsg = SdLoadString(IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST);
        SdSubstituteProductInfo(szMsg);
        MessageBox(szMsg, SEVERE);
        abort;
    endif;

    nSetupType = COMPLETE;

    // 시스템 드라이브 문자 가져오기
    nResult = GetEnvVar("SystemDrive", szDrive);
    if (nResult < 0) then
        ParsePath(szDrive, TARGETDIR, PATH_DRIVE);
    endif;

    szDir = szDrive ^ "\\MyFolder\\DAESEONG";
    TARGETDIR = szDir;

    szName = "";
    szCompany = "";
    bLicenseAccepted = FALSE;

Dlg_Start:
    nResult = 0;

Dlg_SdWelcome:
    szTitle = "";
    szMsg = "";
    nResult = SdWelcome(szTitle, szMsg);
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdLicense2:
    szTitle = "";
    szOpt1 = "";
    szOpt2 = "";
    szLicenseFile = SUPPORTDIR ^ "License.rtf";
    if (nResult = BACK) then
        goto Dlg_SdWelcome;
    else
        bLicenseAccepted = TRUE;
    endif;

    Enable(STATUSEX);
    Disable(STATUSEX);

Dlg_SdAskDestPath2:
    if ((nResult = BACK) && (nSetupType != CUSTOM)) goto Dlg_SdLicense2;

    szTitle = "";
    szMsg = "";

    szDir = TARGETDIR;
    nResult = SdAskDestPath2(szTitle, szMsg, szDir);
    if (nResult = BACK) goto Dlg_SdLicense2;

    // 드라이브 문자 추출
    ParsePath(szDrive, szDir, PATH_DRIVE);
   
    // 드라이브 문자가 없으면 시스템 드라이브
    if (StrLength(szDrive) < 2) then
        
        nResult = GetEnvVar("SystemDrive", szDrive);
		if (nResult < 0) then
			ParsePath(szDrive, TARGETDIR, PATH_DRIVE);
		endif;
    
    endif;
        
    TARGETDIR = szDrive ^ "\\MyFolder\\DAESEONG";
    

Dlg_SdFeatureTree:
    if (nResult = BACK) goto Dlg_SdAskDestPath2;

Dlg_SdStartCopy2:
    
    szTitle = "";
    szMsg = "";
    nResult = SdStartCopy2(szTitle, szMsg);
    if (nResult = BACK) goto Dlg_Start;

    SetStatusExStaticText(SdLoadString(IDS_IFX_STATUSEX_STATICTEXT_FIRSTUI));
    return 0;
end;


// ───── [설치 완료] ─────
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
    NUMBER nReserved, nOption, nResult; 
    BOOL bEdgeInstall, bDotNetInstall;
begin
    ShowObjWizardPages(NEXT);

    szTitle = "";
    szMsg1 = "";
    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
    bvOpt1 = FALSE;
    bvOpt2 = FALSE;

    bEdgeInstall = FALSE;
    bDotNetInstall = FALSE;


    SdShowMsg ("db 데이터 확인 중 입니다.", TRUE);
    
    copydb();
    

    SdShowMsg ("재배포 패키지  확인 중 입니다.", TRUE);

    //재배포 패키지	
    nResult = InstallRedist();
    
    
    //엣지 런타임 라이브러리 설치 여부 체크
    nResult = CheckEdgeInstall();
    if(nResult == 1) then
        bEdgeInstall = TRUE;
	endif;
	
	//.net4.8 설치 여부 체크
    if CheckDotNetInstall() == TRUE then
        bDotNetInstall = TRUE;
    endif;	
	
	
    SdShowMsg ("엣지 라이브러리 확인 중 입니다.", TRUE);
    
    //엣지 패키지    
    if (bEdgeInstall == FALSE) then    
       nResult = InstallEdge();
    endif;
    
    
    SdShowMsg ("닷넷 라이브러리 확인 중 입니다.", TRUE);
    
    //설치 여부가 불확실하다.
    //.net4.8 패키지
    if (bDotNetInstall == FALSE) then   
       nResult = InstallDotNet();
    endif;
       
        
    SdShowMsg ("환경파일 확인 중 입니다.", TRUE);

    //db 복사 완료 여부 확인 중     
    waitForMariaDBFiles();
    
    //my.ini 파일 생성
    writeMariaDBIni(TARGETDIR);
        
    //방화벽 예외 처리
    AddFirewallRule();
   
    //MariaDB 서비스 생성
    installMariaDBservice();
   
    Sleep(2000);
    
    //MariaDB 서비스 시작
    StartMariaDBService();


    SdShowMsg ("", FALSE);  
    
    
    Disable( STATUSEX );

    ShowObjWizardPages( NEXT );  
  
    szTitle   = "설치 완료"; 
	if (SdFinishReboot (szTitle, szMsg1, nOption, szMsg2, nReserved) < 0) then 
		MessageBox ("SdFinishReboot failed.", SEVERE); 
	endif; 
	
end;


// ───── [삭제 시작] ─────
function OnMaintUIBefore()
    NUMBER nResult, nType;
    STRING szTitle, szMsg;
begin
    nType = MODIFY;
    OnSQLServerInitializeMaint();

Dlg_Start:
    if (!REMOVEONLY) then
        Disable(BACKBUTTON);
        nType = SdWelcomeMaint(szTitle, szMsg, nType);
        Enable(BACKBUTTON);
        nResult = NEXT;
    else
        Disable(DIALOGCACHE);
        nType = REMOVEALL;
    endif;

    if (nType = REMOVEALL) then
        nResult = MessageBox(SdLoadString(IFX_MAINTUI_MSG), MB_YESNO);
        if (nResult != IDYES) then
            if (REMOVEONLY) then
                abort;
            else
                goto Dlg_Start;
            endif;
        endif;
    endif;

Dlg_SdFeatureTree:
    if (nType = MODIFY) then
        szTitle = "";
        szMsg = SdLoadString(SD_STR_COMPONENT_MAINT_MSG);
        nResult = SdFeatureTree(szTitle, szMsg, TARGETDIR, "", -1);
        if (nResult = BACK) goto Dlg_Start;
    endif;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages(nResult);
    if ((nResult = BACK) && (nType != MODIFY)) goto Dlg_Start;
    if ((nResult = BACK) && (nType = MODIFY)) goto Dlg_SdFeatureTree;

    switch (nType)
        case REMOVEALL:
        
            SdShowMsg ("서비스 확인 중 입니다.", TRUE);
            
            //MariaDB 서비스 중지
            StopMariaDBService();
            
            Sleep(2000);
            
            //MariaDB 서비스 삭제
            DeleteMariaDBService();                    
        
            SdShowMsg ("", FALSE);  
            
            FeatureRemoveAllInMediaAndLog();
            SetStatusExStaticText(SdLoadString(IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL));
        case REPAIR:
            if (ADDREMOVE) then
                FeatureUpdate("");
            else
                FeatureReinstall();
            endif;
            SetStatusExStaticText(SdLoadString(IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REPAIR));
        case MODIFY:
            SetStatusExStaticText(SdLoadString(IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_MODIFY));
    endswitch;
end;


// ───── [삭제 완료] ─────
function OnMaintUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
begin
    ShowObjWizardPages(NEXT);

    if (REMOVEALLMODE) then
        szTitle = SdLoadString(IFX_SDFINISH_REMOVE_TITLE);
        szMsg1 = SdLoadString(IFX_SDFINISH_REMOVE_MSG1);
    else
        szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);
        szMsg1 = SdLoadString(IFX_SDFINISH_MAINT_MSG1);
    endif;

    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
    bvOpt1 = FALSE;
    bvOpt2 = FALSE;

    szTitle   = "제거 완료";      
    Sleep(500);
    SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
    
end;

//my.ini 파일 작성
function writeMariaDBIni(szPath)    
    NUMBER nResult; 
    STRING szCmdLine;
begin
    
    szCmdLine = "\"" + SUPPORTDIR + "create_ini.exe\" \"" + szPath + "\"";
    
    nResult = LaunchAppAndWait(szCmdLine, "", LAAW_OPTION_HIDDEN);
    if (nResult < 0) then
        MessageBox("환경파일 생성 중 오류 발생", SEVERE);
    endif;
    
end;

function waitForMariaDBFiles()
    NUMBER nTries;
    STRING szFile;
begin
    nTries = 0;
    szFile = TARGETDIR ^ "MariaDB\\data\\multi-master.info";
    while (!Is(FILE_EXISTS, szFile) && nTries < 10)
        Delay(1); // 1초 대기
        nTries = nTries + 1;
    endwhile;
end;


//MariaDB 서비스 생성
function installMariaDBservice()
    NUMBER nResult; 
    STRING szCmdLine, szBinPath, szIniPath, szParams;
begin
    szBinPath  = TARGETDIR ^ "MariaDB\\bin\\mysqld.exe";
    szIniPath  = TARGETDIR ^ "MariaDB\\data\\my.ini";
    szParams   = ' --install "MariaDB" --defaults-file="' + szIniPath + '"';

    nResult = LaunchAppAndWait(szBinPath, szParams, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN);
    if (nResult < 0) then
        //MessageBox("MariaDB 서비스 생성 오류 발생", SEVERE);
    endif;
    
end;

//MariaDB 서비스 시작
function StartMariaDBService()
    NUMBER nResult;
begin
    nResult = LaunchAppAndWait("cmd.exe", '/c net start MariaDB', LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN);
    if (nResult < 0) then
        //MessageBox("MariaDB 서비스를 시작하지 못했습니다.", SEVERE);
    endif;
end;

//MariaDB 서비스 중지
function StopMariaDBService()
    NUMBER nResult;
begin    
    nResult = LaunchAppAndWait("cmd.exe", '/c net stop MariaDB', LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN);
    if (nResult < 0) then
        // MessageBox("MariaDB 서비스를 중지하지 못했습니다.", SEVERE);
    endif;
end;

//MariaDB 서비스 삭제
function DeleteMariaDBService()
    NUMBER nResult;
begin    
    nResult = LaunchAppAndWait("cmd.exe", '/c sc delete MariaDB', LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN);
    if (nResult < 0) then
        // MessageBox("MariaDB 서비스를 삭제하지 못했습니다.", SEVERE);
    endif;
end;

//방화벽 예외 처리
function AddFirewallRule()
    STRING szCommand, szParams, szRuleName, szPort;
    NUMBER nResult;
    NUMBER nPort;
begin

    nPort = 3306;
    NumToStr(szPort, nPort);

    szRuleName = '"MariaDB Port ' + szPort + '"';
    szCommand   = "netsh";
    szParams    = 'advfirewall firewall add rule name=' + szRuleName +
                  ' dir=in action=allow protocol=TCP localport=' + szPort;

    nResult = LaunchAppAndWait(szCommand, szParams, LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN);
    if (nResult < 0) then
        //MessageBox("방화벽 규칙 추가 명령 실행 실패", SEVERE);
    endif;
end;

//설치시 압축된 파일 복사
function copydb()
    NUMBER nReserved, nOption, nResult; 
    STRING szZipPath1, szZipPath2, szDestPath1, szDestPath2, szCmdLine1, szCmdLine2;
begin

    szZipPath1   = SUPPORTDIR ^ "MariaDB.zip";
    szZipPath2   = SUPPORTDIR ^ "7-Zip.zip";  
    szDestPath1  = TARGETDIR ^ "MariaDB";
    szDestPath2  = TARGETDIR ^ "7-Zip";                  
    
    szCmdLine1 = "\"" + SUPPORTDIR ^ "unzip.exe\" \"" + szZipPath1 + "\" \"" + szDestPath1 + "\"";
    szCmdLine2 = "\"" + SUPPORTDIR ^ "unzip.exe\" \"" + szZipPath2 + "\" \"" + szDestPath2 + "\"";


    // 첫 번째 압축 해제 (CMD 창 숨김)
    nResult = LaunchAppAndWait(szCmdLine1, "", LAAW_OPTION_HIDDEN);
    if (nResult < 0) then
        //MessageBox("첫 번째 압축 해제 중 오류 발생", SEVERE);
    endif;

    // 두 번째 압축 해제 (CMD 창 숨김)
    nResult = LaunchAppAndWait(szCmdLine2, "", LAAW_OPTION_HIDDEN);
    if (nResult < 0) then
        //MessageBox("두 번째 압축 해제 중 오류 발생", SEVERE);
    endif;
end;

//닷넷 4.8 런타임 설치 여부
function BOOL CheckDotNetInstall()
    STRING szKey1, szKey2;
    STRING szName;
    STRING szValue;
    NUMBER nResult, nvType, nSize;
    NUMBER nRelease;
begin
    // 레지스트리 경로 설정
    szKey1 = "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full";
    szKey2 = "SOFTWARE\\WOW6432Node\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full";
    szName  = "Release";
    nvType  = REGDB_STRING;    // 반드시 STRING으로 설정
    nSize   = 256;
    szValue = "";

    // 레지스트리 루트 설정
    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);

    // 첫 번째 레지스트리 키 확인
    nResult = RegDBGetKeyValueEx(szKey1, szName, nvType, szValue, nSize);
    if (nResult = 0) then
        nResult = StrToNum (nRelease, szValue);
        if (nResult = 0) then        
			if (nRelease >= 528040) then
				return TRUE; // .NET 4.8 이상
			endif;
		endif;	
    endif;

    // 두 번째 (WOW6432Node) 키 확인
    nResult = RegDBGetKeyValueEx(szKey2, szName, nvType, szValue, nSize);
    if (nResult = 0) then
        nResult = StrToNum (nRelease, szValue);
        if (nResult = 0) then        
			if (nRelease >= 528040) then
				return TRUE; // .NET 4.8 이상
			endif;
		endif;	
    endif;

    return FALSE; 
end;

//닷넷 4.8 런타임 설치
function NUMBER InstallDotNet()
    STRING szProgram, szCmdLine, szMsg, Found;
    NUMBER nResult;
begin

    szProgram = SUPPORTDIR ^ "NDP48-x86-x64-AllOS-ENU.exe";   
	nResult = FindExecutableA(szProgram, "", Found);
	if (nResult > 32) then
	
	    nResult = LaunchAppAndWait(szProgram, "/q /norestart", WAIT);
		if (nResult = 0) then
			Sprintf(szMsg, ".NET Framework 4.8 설치가 완료되었거나 이미 설치되어 있습니다.");
			MessageBox(szMsg, INFORMATION);
		else
			Sprintf(szMsg, ".NET Framework 4.8 설치에 실패했습니다. 오류 코드: %d", nResult);
			MessageBox(szMsg, SEVERE);
		endif; 

	endif;

    return nResult;
end;


//엣지 런차임라이브러리 설치 여부
function CheckEdgeInstall()

    STRING szTitle;
    NUMBER nResult, nvType, nSize;
    STRING szEdge_1, szEdge_2;
	STRING szValue;
	BOOL bInstallChecking;
    
begin
    bInstallChecking = FALSE;
    nResult = 0;
    
    szEdge_1 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Microsoft EdgeWebView";
    szEdge_2 = "SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\Microsoft EdgeWebView";
    nvType = REGDB_STRING;
    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
    
    //Check1
    nResult = RegDBGetKeyValueEx(szEdge_1, "DisplayVersion", nvType, szValue, nSize);
    if(nResult == 0) then	
		bInstallChecking = TRUE;//레지스트리키가 있다		
	endif;	
	
	
	//Check2
	if bInstallChecking == FALSE then
		nResult = RegDBGetKeyValueEx(szEdge_2, "DisplayVersion", nvType, szValue, nSize);
		if(nResult == 0) then	
			bInstallChecking = TRUE;//레지스트리키가 있다		
		endif;	
	endif;
		
	
	if(bInstallChecking) then
		nResult =  1;
	else
		nResult = 0;
	endif;
	
    return nResult;
end;

//엣지 런타임라이브러리 설치
function NUMBER InstallEdge()
    STRING szProgram, szCmdLine, szMsg, Found;
    NUMBER nResult;
begin

    szProgram = SUPPORTDIR ^ "MicrosoftEdgeWebView2RuntimeInstallerX64.exe";   
	nResult = FindExecutableA(szProgram, "", Found);
	if (nResult > 32) then
	
	    nResult = LaunchAppAndWait(szProgram, "/silent /install", WAIT);
		if (nResult < 0) then
			//MessageBox("64-bit VC++ EdgeWebView2 설치 실패", SEVERE);
			return nResult;
		endif;	    

	endif;
	
	szProgram = SUPPORTDIR ^ "MicrosoftEdgeWebView2RuntimeInstallerX86.exe";
	nResult = FindExecutableA(szProgram, "", Found);
	if (nResult > 32) then
	
	    nResult = LaunchAppAndWait(szProgram, "/silent /install", WAIT);
		if (nResult < 0) then
			//MessageBox("32-bit VC++ EdgeWebView2 설치 실패", SEVERE);
			return nResult;
		endif;	    

	endif;

    return nResult;
end;


//재배포 패키지 설치
function NUMBER InstallRedist()
    STRING szProgram, szCmdLine, szMsg, Found;
    NUMBER nResult;
begin

    szProgram = SUPPORTDIR ^ "VC_redist.x64.exe";   
	nResult = FindExecutableA(szProgram, "", Found);
	if (nResult > 32) then
	
	    nResult = LaunchAppAndWait(szProgram, "/install /quiet /norestart", WAIT);
		if (nResult < 0) then
			//MessageBox("64-bit VC++ Redistributable 설치 실패", SEVERE);
			return nResult;
		endif;	    

	endif;
	
	szProgram = SUPPORTDIR ^ "VC_redist.x86.exe";
	nResult = FindExecutableA(szProgram, "", Found);
	if (nResult > 32) then
	
	    nResult = LaunchAppAndWait(szProgram, "/install /quiet /norestart", WAIT);
		if (nResult < 0) then
			//MessageBox("32-bit VC++ Redistributable 설치 실패", SEVERE);
			return nResult;
		endif;	    

	endif;   

    return nResult;
end;


