
#include "ifx.h"


prototype Shell32.ShellExecuteA(HWND,BYREF STRING,BYREF STRING,BYREF STRING,BYREF STRING,INT);
prototype LaunchDefaultBrowser(STRING);

#define RES_DIALOG_ID	3000
#define RES_PICTURE_ID  3001
#define RES_RADIO_ID_1  3002
#define RES_RADIO_ID_2  3003
#define RES_EDIT_ID     3004
#define RES_BUTTON_ID_1 3005
#define RES_BUTTON_ID_2 3006
#define RES_BUTTON_ID_3 3007

prototype CheckEzDefineDialog();

//설치 시작
function OnFirstUIBefore()
    number  nResult, nLevel, nSize, nSetupType;
    string  szTitle, szMsg, szOpt1, szOpt2, szLicenseFile;
    string  szName, szCompany, szTargetPath, szDir, szFeatures;
    BOOL    bLicenseAccepted;
    number nindex;
begin	

    if( REMOVEONLY ) then
        Disable( DIALOGCACHE );
		szMsg = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
   		SdSubstituteProductInfo( szMsg );
		MessageBox( szMsg, SEVERE );
		abort;
    endif;
   
    nSetupType = COMPLETE;	    
    szDir = PROGRAMFILES ^@ID_STRING2;	
    TARGETDIR = szDir;
    
    szName = "";
    szCompany = "";
    bLicenseAccepted = FALSE;
    
    
Dlg_Start:
    nResult = 0;

Dlg_SdWelcome:
    szTitle = "";
    szMsg = "";
    nResult = SdWelcome( szTitle, szMsg );
    
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdStartCopy2:
    
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_FIRSTUI ) );
 
    return 0;
end;

//설치 완료
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
    NUMBER nReserved, nOption; 
begin

    ShowObjWizardPages(NEXT);
    
    szTitle = "";
    szMsg1 = ""; 
    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    
    
    Disable (BACKBUTTON);    
    
    //설치 항목 복사
    
    
    Disable( STATUSEX );

    ShowObjWizardPages( NEXT );  
  
    szTitle   = "나의프로젝트 설치 완료"; 
	if (SdFinishReboot (szTitle, szMsg1, nOption, szMsg2, nReserved) < 0) then 
		MessageBox ("SdFinishReboot failed.", SEVERE); 
	endif; 
   
end;


//삭제 시작
function OnMaintUIBefore()
    number	nResult, nType;
    string	szTitle, szMsg;
begin
	
	// nType defaults to MODIFY.
	nType = MODIFY;

    //Initialize SQL
    OnSQLServerInitializeMaint();

// Beginning of UI Sequence
Dlg_Start:

    CheckEzDefineDialog();
    
    
    Disable( DIALOGCACHE );

    nType = REMOVEALL;
        
	nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
	if (nResult != IDYES ) then
        abort;
	endif;

    
Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if ( ( nResult = BACK ) && ( nType != MODIFY ) ) goto Dlg_Start;
    
        
	// Ensure that all previously installed features are removed.
	FeatureRemoveAllInMediaAndLog();

    // Added in 11.0 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );
 
end;


//삭제 완료
function OnMaintUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
begin

    ShowObjWizardPages(NEXT);
    
    
    if( REMOVEALLMODE ) then
        szTitle = SdLoadString(IFX_SDFINISH_REMOVE_TITLE);
        szMsg1 = SdLoadString(IFX_SDFINISH_REMOVE_MSG1);
    else
        szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);    
        szMsg1  = SdLoadString(IFX_SDFINISH_MAINT_MSG1);
    endif;

	szMsg2 = "";    
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    

    szTitle   = "나의프로젝트 제거 완료";      
    Sleep(500);
    SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
    
end;



function CheckEzDefineDialog()
   
    STRING  szDialogName, szEditText, szCheckValue, szParam; 
    
    BOOL    bDone;
   
    NUMBER  nCmdValue, nResult, nCheckValue;

begin  
            
    szDialogName = "제목";
    szEditText = "에디트 내용";
    
    nResult = EzDefineDialog(szDialogName, SUPPORTDIR ^ "ISUser1.dll", "", RES_DIALOG_ID);    
      
    if (nResult < 0) then
       MessageBox ("Error in defining dialog", SEVERE);
       abort;
    endif; 
        
    bDone = FALSE;

    repeat

    nCmdValue = WaitOnDialog(szDialogName);

    switch (nCmdValue)  
    
         case DLG_CLOSE:

            Do (EXIT);
            
         case DLG_ERR:

            bDone = TRUE;    
            abort;
            
         case DLG_INIT: ;
         
              CtrlSetState(szDialogName, RES_RADIO_ID_1, BUTTON_CHECKED);
              CtrlSetState(szDialogName, RES_RADIO_ID_2, BUTTON_UNCHECKED);              
              CtrlSetText(szDialogName, RES_EDIT_ID, szEditText);
         
         case RES_PICTURE_ID:
             
             //picturebox 미작동
             CtrlSetText(szDialogName, RES_PICTURE_ID, "RES_PICTURE_ID");
             bDone = TRUE;  

         case RES_BUTTON_ID_1:               
             CtrlSetText(szDialogName, RES_EDIT_ID, "RES_BUTTON_ID_1");
             bDone = TRUE;      
              
         case RES_BUTTON_ID_2:          
             CtrlSetText(szDialogName, RES_EDIT_ID, "RES_BUTTON_ID_2");
             bDone = TRUE;
             
         case RES_BUTTON_ID_3: 
             CtrlSetText(szDialogName, RES_EDIT_ID, "RES_BUTTON_ID_3");
             bDone = TRUE; 
             
    endswitch;

   until bDone;
   
     if( CtrlGetState( szDialogName, RES_RADIO_ID_1 ) = BUTTON_CHECKED ) then
         nCheckValue = 1;
     elseif (CtrlGetState(szDialogName, RES_RADIO_ID_2) = BUTTON_CHECKED) then  
         nCheckValue = 2;  
	 endif;  
	 
	 Sprintf (szCheckValue, "%d", nCheckValue);
	 //MessageBox(szCheckValue, INFORMATION);
   
     CtrlGetText(szDialogName, RES_EDIT_ID, szEditText);
     //MessageBox(szEditText, INFORMATION);
     
     //LaunchDefaultBrowser("https://www.naver.com");
     //LaunchAppAndWait(TARGETDIR^"my.exe", szParam , WAIT);

     EndDialog (szDialogName);
     ReleaseDialog (szDialogName);

   return NEXT;     
	
end;


function LaunchDefaultBrowser(szURL)
    HWND hWnd;
    LONG lResult;
    STRING szTemp1, szTemp2;

begin

    szTemp1 = "open";
    szTemp2 = "";
    hWnd = GetWindowHandle(HWND_INSTALL);
    UseDLL(WINSYSDIR ^ "Shell32.dll");
    lResult = Shell32.ShellExecuteA(hWnd, szTemp1, szURL, szTemp2, szTemp2, SW_SHOW);
    UnUseDLL(WINSYSDIR ^ "Shell32.dll");

    return lResult;
    
end;
